/*
 * Copyright 2013 Hongxin Telecommunication Technologies Co, Ltd.,
 * Wuhan, Hubei, China. All rights reserved.
 */

/*
 * SysRoleEditor.java
 *
 * Created on 2015-2-11, 8:29:11
 */

package prj.ui.user;

import com.hongxin.component.export.AbstractRecordSet;

import com.hongxin.saf.SingleFrameApplication;
import com.hongxin.util.GUIUtils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;
import prj.ui.basic.DefaultDataExportTask;
import prj.user.po.Role;

/**
 * 角色编辑界面。
 * @author fanhuigang
 */
public class SysRoleEditor extends javax.swing.JPanel
{
	/**
	 * 界面操作状态。
	 */
	private boolean cancelClicked = true;
	/**
	 * 角色对象。
	 */
	private Role role;
	private JDialog dialog;
	private ResourceMap rm;
	
    /** Creates new form SysRoleEditor */
    public SysRoleEditor()
	{
        initComponents();
		initialize();
    }
	
	/**
	 * 初始化。
	 */
	private void initialize()
	{
		rm = Application.getInstance().getContext().getResourceMap(SysRoleEditor.class);
		sysRoleFuncTree.initModel();
	}
	
	/**
	 * 设置角色对象。
	 * @param role 角色对象
	 */
	public void setRole(Role role)
	{
		this.role = role;
		if(role != null)
		{
			tfName.setText(role.getName());
			tfDesc.setText(role.getDescription());
			// 加载角色权限
//			ProcessData out = OmcProcessor.process(Command.user, 
//					Command.getSysRole, role.getId());
//			if(out.getData() != null)
//			{
//				role.setListFunction((List)out.getData());
//				sysRoleFuncTree.setSelectedFunction((List)out.getData());
//			}
		}
	}
	
	/**
	 * 获取角色对象。
	 * @return 角色对象
	 */
	public Role getRole()
	{
		// 保存角色配置
		Role newRole = (role != null) ? role : new Role();
		newRole.setName(tfName.getText().trim());
		newRole.setDescription(tfDesc.getText().trim());
		newRole.setListFunction(sysRoleFuncTree.getSelectedFunction());
		return newRole;
	}
	
	/**
	 * 显示界面。
	 * @return 选择状态
	 */
	public boolean showDialog(Role role)
	{
		setRole(role);
		dialog = new JDialog(SingleFrameApplication.getInstance().getMainFrame(), true);
		dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		dialog.setName(getName());
		dialog.add(this);
		dialog.setTitle(rm.getString(role != null ? "form.title.edit" : "form.title.new"));
		GUIUtils.addHideAction(dialog);
		dialog.getRootPane().setDefaultButton(btnCancel);
		dialog.addWindowListener(new java.awt.event.WindowAdapter()
		{
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt)
			{
				cancel();
			}
		});
		dialog.pack();
		SingleFrameApplication.getInstance().show(dialog);
		return !cancelClicked;
	}
	
	/**
	 * 角色记录集访问接口。
	 */
	private class RoleRecordSet extends AbstractRecordSet
	{
		/**
		 * 角色数据源。
		 */
		private Role source;
		/**
		 * 记录索引指示器。
		 */
		private int indicator = -1;
		
		RoleRecordSet(Role source)
		{
			this.source = source;
		}
		
		@Override
		public boolean next()
		{
			if(indicator == -1)
			{
				indicator += 1;
				return indicator < source.getListFunction().size() + 2;
			}
			else
			{
				if(indicator < source.getListFunction().size() + 2)
				{
					if(indicator == source.getListFunction().size() + 1)
					{
						return false;
					}
					else
					{
						indicator += 1;
						return true;
					}
				}
			}
			return false;
		}

		@Override
		public Object getRecord()
		{
			if(indicator == 0)
			{
				// 角色名称
				return new String[] { rm.getString("msg.role.name"), source.getName() };
			}
			else if(indicator == 1)
			{
				// 角色描述
				return new String[] { rm.getString("msg.role.desc"), source.getDescription() };
			}
			else
			{
				// 权限列表
				int func = source.getListFunction().get(indicator - 2);
//				String funcName = String.format("%s/%s", OmcDictionary.getInstance().sys_getItemAlias(func),OmcDictionary.getInstance().sys_getNameById(func));
				String funcName = "a";
				return new String[] { rm.getString("msg.role.func"), funcName };
			}
		}

		@Override
		public void moveFirst()
		{
			// 重置记录索引指示器
			indicator = -1;
		}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lblName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lblDesc = new javax.swing.JLabel();
        tfDesc = new javax.swing.JTextField();
        cbCheckAll = new javax.swing.JCheckBox();
        btnCancel = new javax.swing.JButton();
        btnCommit = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sysRoleFuncTree = new prj.ui.user.SysRoleFuncTree();

        setName("Form_SysRoleEditor"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(prj.PrjApp.class).getContext().getResourceMap(SysRoleEditor.class);
        lblName.setText(resourceMap.getString("lblName.text")); // NOI18N
        lblName.setName("lblName"); // NOI18N

        tfName.setName("tfName"); // NOI18N

        lblDesc.setText(resourceMap.getString("lblDesc.text")); // NOI18N
        lblDesc.setName("lblDesc"); // NOI18N

        tfDesc.setName("tfDesc"); // NOI18N

        cbCheckAll.setText(resourceMap.getString("cbCheckAll.text")); // NOI18N
        cbCheckAll.setName("cbCheckAll"); // NOI18N
        cbCheckAll.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                cbCheckAllItemStateChanged(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(prj.PrjApp.class).getContext().getActionMap(SysRoleEditor.class, this);
        btnCancel.setAction(actionMap.get("cancel")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        btnCommit.setAction(actionMap.get("commit")); // NOI18N
        btnCommit.setName("btnCommit"); // NOI18N

        btnExport.setAction(actionMap.get("export")); // NOI18N
        btnExport.setName("btnExport"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        sysRoleFuncTree.setCheckBoxEnabled(false);
        sysRoleFuncTree.setName("sysRoleFuncTree"); // NOI18N
        sysRoleFuncTree.setRootVisible(false);
        jScrollPane1.setViewportView(sysRoleFuncTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbCheckAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCommit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDesc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDesc)
                    .addComponent(tfDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 389, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCheckAll)
                    .addComponent(btnCancel)
                    .addComponent(btnCommit)
                    .addComponent(btnExport))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGap(33, 33, 33)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbCheckAllItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cbCheckAllItemStateChanged
    {//GEN-HEADEREND:event_cbCheckAllItemStateChanged
        sysRoleFuncTree.selectAll(cbCheckAll.isSelected());
    }//GEN-LAST:event_cbCheckAllItemStateChanged

	@Action
	public void commit()
	{
		// 名称检查
//		ElementNameValidator validator = new ElementNameValidator(false);
//		Validator.Result result = validator.validate(tfName.getText().trim());
//		if(result != null)
//		{
//			JOptionPane.showMessageDialog(null, 
//					rm.getString("msg.name.invalid", result.getDescription()), 
//					rm.getString("msg.error"), 
//					JOptionPane.ERROR_MESSAGE);
//			return;
//		}
		cancelClicked = false;
		if(dialog != null)
		{
			dialog.dispose();
			dialog = null;
		}
	}

	@Action
	public void cancel()
	{
		cancelClicked = true;
		if(dialog != null)
		{
			dialog.dispose();
			dialog = null;
		}
	}

	@Action
	public Task export()
	{
		// 区分编辑角色和新建角色
		// 编辑角色时导出原始角色配置信息，新建角色时导出当前配置信息
		Role exportRole;
		if(role != null)
		{
			exportRole = role;
		}
		else
		{
			exportRole = new Role();
			exportRole.setName(tfName.getText().trim());
			exportRole.setDescription(tfDesc.getText().trim());
			exportRole.setListFunction(sysRoleFuncTree.getSelectedFunction());
		}
		// 角色权限排序
		Collections.sort(exportRole.getListFunction(), new Comparator()
		{
			@Override
			public int compare(Object o1, Object o2)
			{
//				String func1 = String.format("%s/%s", 
//						OmcDictionary.getInstance().sys_getItemAlias((Integer)o1),
//						OmcDictionary.getInstance().sys_getNameById((Integer)o1));
//				String func2 = String.format("%s/%s", 
//						OmcDictionary.getInstance().sys_getItemAlias((Integer)o2),
//						OmcDictionary.getInstance().sys_getNameById((Integer)o2));
				String func1 = "a";
				String func2 = "b";
				return func1.compareTo(func2);
			}
		});
		// 导出数据
		RoleRecordSet recordSet = new RoleRecordSet(exportRole);
		// 确定导出字段集合
		List<String> listField = new ArrayList();
		listField.add(rm.getString("msg.col.name"));
		listField.add(rm.getString("msg.col.value"));
		return new DefaultDataExportTask(listField, recordSet, null, null, null);
	}

    private class ExportTask extends org.jdesktop.application.Task<Object, Void> {
        ExportTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ExportTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCommit;
    private javax.swing.JButton btnExport;
    private javax.swing.JCheckBox cbCheckAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblName;
    /*
    private com.hongxin.omc.ui.user.SysRoleFuncTree sysRoleFuncTree;
    */
    private prj.ui.user.SysRoleFuncTree sysRoleFuncTree;
    private javax.swing.JTextField tfDesc;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
