/*
 * Copyright 2009 Hongxin Telecommunication Technologies Co, Ltd.,
 * Wuhan, Hubei, China. All rights reserved.
 */

/*
 * UserGroupManage.java
 *
 * Created on 2009-8-20, 15:13:20
 */
package com.hongxin.omc.ui.user;

import com.hongxin.omc.ui.util.GUIUtil;
import com.hongxin.omc.user.protocol.Role;
import com.hongxin.omc.user.protocol.UserGroup;
import com.hongxin.omc.util.OmcConstants;
import com.hongxin.saf.SingleFrameApplication;
import com.hongxin.util.GUIUtils;
import java.util.List;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import java.util.ArrayList;
import org.jdesktop.application.Application;

/**
 * 用户组选择界面
 * @author dangzerong
 */
public class UserGroupSelect extends javax.swing.JPanel
{
	/**
	 * 资源文件对象
	 */
	private ResourceMap rm;
	/**
	 * 父窗口对象
	 */
	private JDialog dialog;
	/**
	 * 用户组集合。
	 */
	private List<UserGroup> listUserGroup;
	/**
	 * 角色集合。
	 */
	private List<Role> listRole;
	/**
	 * 添加的用户组集合
	 */
	private List<UserGroup> listGroup;
	/**
	 * 选择的用户组列表。
	 */
	private List<Integer> listSelectedGroup;
	/**
	 * 操作状态。
	 */
	private boolean cancelClicked = true;
	private DefaultTableModel UserGroupTableModel;
	private Vector<String> userGroupColumns;

	/**
	 * 初始化用户组管理界面的基本信息显示
	 * @param parent 输入项：父窗口对象
	 */
	public UserGroupSelect(List<UserGroup> listUserGroup, 
			List<Integer> listSelectedGroup, List<Role> listRole)
	{
		rm = Application.getInstance().getContext().getResourceMap(UserGroupSelect.class);
		this.listUserGroup = listUserGroup;
		this.listSelectedGroup = listSelectedGroup;
		this.listRole = listRole;
		initComponents();
		// 设置用户组数据
		initialize();
	}

	/**
	 * 显示界面。
	 * @return 操作状态
	 */
	public boolean showDialog()
	{
		dialog = new JDialog(SingleFrameApplication.getInstance().getMainFrame(), true);
		dialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		dialog.setName(getName());
		dialog.setLayout(new java.awt.BorderLayout());
		dialog.add(this);
		GUIUtils.addHideAction(dialog);
		dialog.getRootPane().setDefaultButton(btnOk);
		dialog.addWindowListener(new java.awt.event.WindowAdapter()
		{
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt)
			{
				cancel();
			}
		});
		dialog.setTitle(rm.getString("form.title"));
		SingleFrameApplication.getInstance().show(dialog);
		return !cancelClicked;
	}

	/**
	 * 初始化用户数据
	 */
	private void initialize()
	{
		// 获得用户组
		// 显示用户组列表
		createViewUserGroupTabel();
	}

	/**
	 * 创建用户组列表
	 */
	private void createViewUserGroupTabel()
	{
		// 创建显示列
		userGroupColumns = new Vector();
		userGroupColumns.add(rm.getString("col.select"));
		userGroupColumns.add(rm.getString("col.group"));
		userGroupColumns.add(rm.getString("col.role"));
		userGroupColumns.add(rm.getString("col.desc"));
		userGroupColumns.add(rm.getString("col.lock"));
		// 获得用户组表模型
		DefaultTableModel userGroupModel =
				(DefaultTableModel)tableUserGroup.getModel();
		userGroupModel.setColumnIdentifiers(userGroupColumns);
		// 清除所有列
		for(int i = 0; i < userGroupModel.getRowCount(); i++)
		{
			userGroupModel.removeRow(i);
		}
		// 设置用户组数据
		for(UserGroup group : listUserGroup)
		{
			Vector vector = new Vector();
			vector.add(listSelectedGroup.indexOf(group.getId()) != -1);
			vector.add(group.getName());
			vector.add(getRoleText(group));
			vector.add(group.getDescription());
			//锁定状态
			switch(group.getLockStatus())
			{
				//未锁定
				case OmcConstants.ugs_normal:
					vector.add(rm.getString("userGroup.unlock"));
					break;
				//锁定
				case OmcConstants.ugs_locked:
					vector.add(rm.getString("userGroup.lock"));
					break;
			}
			userGroupModel.addRow(vector);
		}
	}

	/**
	 * 获取目标用户组对应的角色文本。
	 * @param group 用户组对象
	 * @return 用户组对应角色文本
	 */
	private String getRoleText(UserGroup group)
	{
		List<Integer> listRoleId = group.getListRoleId();
		if(listRoleId != null && !listRoleId.isEmpty())
		{
			if(listRoleId.size() == 1)
			{
				for(Role role : listRole)
				{
					if(role.getId() == listRoleId.get(0))
					{
						return role.getName();
					}
				}
			}
			else
			{
				StringBuilder sbd = new StringBuilder();
				for(Role role : listRole)
				{
					if(sbd.length() > 0)
					{
						sbd.append(",");
					}
					if(listRoleId.indexOf(role.getId()) != -1)
					{
						sbd.append(role.getName());
					}
				}
				return sbd.toString();
			}
		}
		return null;
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        tableScrollPane = new javax.swing.JScrollPane();
        tableUserGroup = GUIUtil.createTable();
        cbSelectAll = new javax.swing.JCheckBox();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setName("Form_SelectUserGroup_1"); // NOI18N

        tableScrollPane.setName("tableScrollPane"); // NOI18N

        UserGroupTableModel =  new DefaultTableModel()
        {
            public Class getColumnClass(int columnIndex)
            {
                if(columnIndex == 0)
                {
                    return Boolean.class;
                }
                return String.class;
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                if(columnIndex == 0)
                {
                    return true;
                }
                return false;
            }
        };
        tableUserGroup.setAutoCreateRowSorter(true);
        tableUserGroup.setModel(UserGroupTableModel
        );
        tableUserGroup.setName("tableUserGroup"); // NOI18N
        tableScrollPane.setViewportView(tableUserGroup);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(UserGroupSelect.class);
        cbSelectAll.setText(resourceMap.getString("cbSelectAll.text")); // NOI18N
        cbSelectAll.setName("cbSelectAll"); // NOI18N
        cbSelectAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbSelectAllActionPerformed(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(UserGroupSelect.class, this);
        btnOk.setAction(actionMap.get("save")); // NOI18N
        btnOk.setText(resourceMap.getString("btnOk.text")); // NOI18N
        btnOk.setName("btnOk"); // NOI18N

        btnCancel.setAction(actionMap.get("cancel")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                        .addComponent(btnOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSelectAll)
                    .addComponent(btnOk)
                    .addComponent(btnCancel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * 选择所有
	 * @param evt
	 */
	private void cbSelectAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSelectAllActionPerformed
	{//GEN-HEADEREND:event_cbSelectAllActionPerformed
		for(int i = 0; i < UserGroupTableModel.getRowCount(); i++)
		{
			UserGroupTableModel.setValueAt(cbSelectAll.isSelected(), i, 0);
		}
}//GEN-LAST:event_cbSelectAllActionPerformed

	/**
	 * 获得选择的用户组对象列表
	 * @return
	 */
	public List<UserGroup> getSelectGroup()
	{
		List<UserGroup> userNewGroupList = new ArrayList();
		//遍历所有
		for(UserGroup old : listGroup)
		{
			//创建新的用户组对象
			UserGroup u = new UserGroup();
			//赋值
			u.setDescription(old.getDescription());
			u.setId(old.getId());
			u.setName(old.getName());
			u.setLockStatus(old.getLockStatus());
			userNewGroupList.add(u);
		}
		return userNewGroupList;
	}

	@Action
	public void save()
	{
		/**
		 * 添加设备
		 */
		//判断查询结果是否为空，如果查询结果为空，不响应此操作
		if(listUserGroup == null || listUserGroup.isEmpty())
		{
			//提示没有设备
			JOptionPane.showMessageDialog(this, 
					rm.getString("mb.selectdev.null"), 
					rm.getString("mb.tip"), 
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		listGroup = new ArrayList();
		//获得选中的设备
		for(int i = 0; i < UserGroupTableModel.getRowCount(); i++)
		{
			if(Boolean.parseBoolean(UserGroupTableModel.getValueAt(i, 0).toString()))
			{
				listGroup.add(listUserGroup.get(i));
			}
		}
		//判断用户是否有选择设备
		if(listGroup.isEmpty())
		{
			//如果没有选择设备，则结束操作
			JOptionPane.showMessageDialog(this, 
					rm.getString("mb.selectgroup.null"), 
					rm.getString("mb.tip"), 
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		cancelClicked = false;
		dialog.dispose();

	}

	@Action
	public void cancel()
	{
		cancelClicked = true;
		if(dialog != null)
		{
			dialog.dispose();
		}
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JCheckBox cbSelectAll;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTable tableUserGroup;
    // End of variables declaration//GEN-END:variables
}
