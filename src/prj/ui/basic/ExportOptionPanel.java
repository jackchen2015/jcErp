/*
 * Copyright 2013 Hongxin Telecommunication Technologies Co, Ltd.,
 * Wuhan, Hubei, China. All rights reserved.
 */

/*
 * ExportOptionPanel.java
 *
 * Created on 2014-8-25, 11:57:13
 */

package prj.ui.basic;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractListModel;
import javax.swing.JCheckBoxMenuItem;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

/**
 * 通用导出选项面板。
 * @author fanhuigang
 */
public class ExportOptionPanel extends javax.swing.JPanel
{
    /** Creates new form ExportOptionPanel */
    public ExportOptionPanel()
	{
        initComponents();
    }
	
	/**
	 * 设置可用的boolean选项。
	 * @param mapOption 选项描述集合
	 * @param mapValue 选项配置集合
	 */
	public void setAvailableBooleanOptoin(Map<String, String> mapOption, 
			Map<String, Boolean> mapValue)
	{
		// 根据选项描述集合初始化选项菜单
		if(mapOption != null && !mapOption.isEmpty())
		{
			// 将选项菜单添加到工具栏
			toolBar.add(optionMenu);
			ResourceMap rm = Application.getInstance().getContext().getResourceMap(ExportOptionPanel.class);
			optionMenu.setText(rm.getString("msg.option.text"));
			for(Map.Entry<String, String> entry : mapOption.entrySet())
			{
				JCheckBoxMenuItem menuItem = new JCheckBoxMenuItem(entry.getValue());
				// 使用名称字段保存选项key
				menuItem.setName(entry.getKey());
				// 根据选项配置集合显示初始配置状态
				if(mapValue != null && mapValue.containsKey(entry.getKey()))
				{
					menuItem.setSelected(mapValue.get(entry.getKey()));
				}
				optionMenu.add(menuItem);
			}
		}
	}
	
	/**
	 * 获取可用的boolean选项配置。
	 * @return 选项配置集合
	 */
	public Map getAvailableBooleanOption()
	{
		Map mapValue = null;
		for(int i = 0; i < optionMenu.getMenuComponentCount(); i++)
		{
			JCheckBoxMenuItem menuItem = (JCheckBoxMenuItem)optionMenu.getMenuComponent(i);
			if(mapValue == null)
			{
				mapValue = new HashMap();
			}
			mapValue.put(menuItem.getName(), menuItem.isSelected());
		}
		return mapValue != null ? mapValue : Collections.EMPTY_MAP;
	}
	
	/**
	 * 设置是否允许选择导出列。
	 * @param enabled 是否允许
	 */
	public void setEnableSelectExportColumn(boolean enabled)
	{
		listColumn.setVisible(enabled);
		cbSelectAll.setVisible(enabled);
	}
	
	/**
	 * 设置导出列集合。
	 * @param columns 导出列集合
	 */
	public void setListExportColumn(List<String> columns)
	{
		listColumn.setModel(new ExportColumnListModel(columns));
	}
	
	/**
	 * 获取导出列集合的选择状态。
	 * @return 导出列选择状态集合
	 */
	public List<Boolean> getExportColumnSelection()
	{
		List<Boolean> selection = new ArrayList();
		if(listColumn.getCheckBoxListSelectionModel().isSelectionEmpty())
		{
			for(int i = 0; i < listColumn.getModel().getSize(); i++)
			{
				selection.add(Boolean.TRUE);
			}
		}
		else
		{
			for(int i = 0; i < listColumn.getModel().getSize(); i++)
			{
				selection.add(listColumn.getCheckBoxListSelectionModel().isSelectedIndex(i));
			}
		}
		return selection;
	}

	/**
	 * 导出列模型。
	 */
	private class ExportColumnListModel extends AbstractListModel
	{
		/**
		 * 数据源。
		 */
		private List source;
		
		ExportColumnListModel(List source)
		{
			this.source = source;
		}
		
		@Override
		public int getSize()
		{
			return source.size();
		}

		@Override
		public Object getElementAt(int index)
		{
			return source.get(index);
		}
	}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        optionMenu = new com.jidesoft.swing.JideSplitButton();
        listScrollPane = new javax.swing.JScrollPane();
        listColumn = new com.jidesoft.swing.CheckBoxList();
        toolBar = new javax.swing.JToolBar();
        cbSelectAll = new javax.swing.JCheckBox();

        optionMenu.setText("jideSplitButton1");
        optionMenu.setName("optionMenu"); // NOI18N

        setName("Form_ExportOptionPanel"); // NOI18N

        listScrollPane.setName("listScrollPane"); // NOI18N

        listColumn.setName("listColumn"); // NOI18N
        listScrollPane.setViewportView(listColumn);

        toolBar.setBorder(null);
        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setName("toolBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ExportOptionPanel.class);
        cbSelectAll.setText(resourceMap.getString("cbSelectAll.text")); // NOI18N
        cbSelectAll.setFocusable(false);
        cbSelectAll.setMargin(new java.awt.Insets(0, 0, 0, 2));
        cbSelectAll.setName("cbSelectAll"); // NOI18N
        cbSelectAll.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                cbSelectAllItemStateChanged(evt);
            }
        });
        toolBar.add(cbSelectAll);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listScrollPane)
                    .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(listScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbSelectAllItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cbSelectAllItemStateChanged
    {//GEN-HEADEREND:event_cbSelectAllItemStateChanged
        if(cbSelectAll.isSelected())
		{
			listColumn.selectAll();
		}
		else
		{
			listColumn.selectNone();
		}
    }//GEN-LAST:event_cbSelectAllItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbSelectAll;
    private com.jidesoft.swing.CheckBoxList listColumn;
    private javax.swing.JScrollPane listScrollPane;
    private com.jidesoft.swing.JideSplitButton optionMenu;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
